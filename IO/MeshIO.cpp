#include "MeshIO.h"


NSP_SLAM_LYJ_BEGIN

SLAM_LYJ_API void writePLY(const std::string& filename, const BaseTriMesh& btm) {
    std::ofstream file(filename);
    if (!file.is_open()) {
        std::cerr << "无法创建文件: " << filename << std::endl;
        return;
    }

    const std::vector<Eigen::Vector3f>& vertices = btm.getVertexs();
    uint32_t vCnt = vertices.size();
    const std::vector<BaseTriFace>& faces = btm.getFaces();
    uint32_t fCnt = faces.size();

    // 写入 PLY 头部
    file << "ply\n";
    file << "format ascii 1.0\n";
    file << "comment Generated by C++ PLY Writer\n";
    file << "element vertex " << vCnt << "\n";
    file << "property float x\n";
    file << "property float y\n";
    file << "property float z\n";
    if (btm.isEnableVNormals()) {
        file << "property float nx\n";
        file << "property float ny\n";
        file << "property float nz\n";
    }
    if (btm.isEnableVColors()) {
        // 头部添加颜色属性
        file << "property uchar red\n";
        file << "property uchar green\n";
        file << "property uchar blue\n";
    }
    file << "element face " << fCnt << "\n";
    file << "property list uchar int vertex_indices\n";
    if (btm.isEnableFNormals()) {
        file << "property float fnx\n";
        file << "property float fny\n";
        file << "property float fnz\n";
    }
    file << "end_header\n";

    // 写入顶点数据
    for (int i = 0; i < vCnt; ++i) {
        file << vertices[i](0) << " " << vertices[i](1) << " " << vertices[i](2) << "\n";
        if (btm.isEnableVColors()) {
            // 写入顶点时添加颜色
            file << btm.getVColor(i)(0) << " " << btm.getVColor(i)(1) << " " << btm.getVColor(i)(2) << "\n";
        }
        if (btm.isEnableVNormals()) {
            // 写入顶点时添加法向
            file << btm.getVNormal(i)(0) << " " << btm.getVNormal(i)(1) << " " << btm.getVNormal(i)(2) << "\n";
        }
    }

    // 写入面数据
    for (int i = 0; i < fCnt; ++i) {
        file << "3 " << faces[i].vId_[0] << " " << faces[i].vId_[1] << " " << faces[i].vId_[2] << "\n";
        if (btm.isEnableFNormals()) {
            file << "3 " << btm.getFNormal(i)(0) << " " << btm.getFNormal(i)(1) << " " << btm.getFNormal(i)(2) << "\n";
        }
    }

    file.close();
}


SLAM_LYJ_API void writePLYBin(const std::string& filename, const BaseTriMesh& btm) {
    std::ofstream file(filename);
    if (!file.is_open()) {
        std::cerr << "无法创建文件: " << filename << std::endl;
        return;
    }

    const std::vector<Eigen::Vector3f>& vertices = btm.getVertexs();
    uint32_t vCnt = vertices.size();
    const std::vector<BaseTriFace>& faces = btm.getFaces();
    uint32_t fCnt = faces.size();

    // 写入 PLY 头部
    file << "ply\n";
    file << "format binary_little_endian 1.0\n";
    file << "comment Generated by C++ PLY Writer\n";
    file << "element vertex " << vCnt << "\n";
    file << "property float x\n";
    file << "property float y\n";
    file << "property float z\n";
    if (btm.isEnableVNormals()) {
        file << "property float nx\n";
        file << "property float ny\n";
        file << "property float nz\n";
    }
    if (btm.isEnableVColors()) {
        // 头部添加颜色属性
        file << "property float r\n";
        file << "property float g\n";
        file << "property float b\n";
    }
    file << "element face " << fCnt << "\n";
    file << "property list uchar int vertex_indices\n";
    if (btm.isEnableFNormals()) {
        file << "property float fnx\n";
        file << "property float fny\n";
        file << "property float fnz\n";
    }
    file << "end_header\n";

    //# OBJ 线段示例
    //l 0 1  # 顶点0到顶点1的线
    //l 1 2

    // 写入顶点数据
    for (int i = 0; i < vCnt; ++i) {
        writeBinary(file, vertices[i](0));
        writeBinary(file, vertices[i](1));
        writeBinary(file, vertices[i](2));
        if (btm.isEnableVColors()) {
            writeBinary(file, btm.getVColor(i)(0));
            writeBinary(file, btm.getVColor(i)(1));
            writeBinary(file, btm.getVColor(i)(2));
        }
        if (btm.isEnableVNormals()) {
            writeBinary(file, btm.getVNormal(i)(0));
            writeBinary(file, btm.getVNormal(i)(1));
            writeBinary(file, btm.getVNormal(i)(2));
        }
    }

    // 写入面数据
    unsigned char fvSize = 3;
    for (int i = 0; i < fCnt; ++i) {
        writeBinary(file, fvSize);
        writeBinary(file, faces[i].vId_[0]);
        writeBinary(file, faces[i].vId_[1]);
        writeBinary(file, faces[i].vId_[2]);
        if (btm.isEnableFNormals()) {
            writeBinary(file, btm.getFNormal(i)(0));
            writeBinary(file, btm.getFNormal(i)(1));
            writeBinary(file, btm.getFNormal(i)(2));
        }
    }

    file.close();
}


NSP_SLAM_LYJ_END